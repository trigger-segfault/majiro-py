(0x100, 0x101, 0x108, 0x109, 0x110, 0x118, 0x119, 0x11A, 0x120, 0x121, 0x128, 0x130, 0x138, 0x139, 0x13A, 0x140, 0x141, 0x142, 0x148, 0x149, 0x14A, 0x150, 0x151, 0x152, 0x158, 0x159, 0x15A, 0x15B, 0x15C, 0x15D, 0x160, 0x161, 0x162, 0x163, 0x164, 0x165, 0x168, 0x170, 0x178, 0x180, 0x188, 0x190, 0x191, 0x1A8, 0x1A9, 0x198, 0x1A0, 0x1A1, 0x1B0, 0x1B2, 0x1B3, 0x1B4, 0x1B5, 0x1B8, 0x1B9, 0x1C0, 0x1C1, 0x1C8, 0x1D0, 0x1D1, 0x1D2, 0x1D8, 0x1D9, 0x1E0, 0x1E8, 0x1F0, 0x1F8, 0x200, 0x210, 0x211, 0x212, 0x213, 0x214, 0x215, 0x218, 0x219, 0x220, 0x221, 0x228, 0x230, 0x231, 0x232, 0x238, 0x239, 0x240, 0x248, 0x250, 0x258, 0x260, 0x270, 0x271, 0x272, 0x278, 0x279, 0x280, 0x281, 0x288, 0x290, 0x291, 0x292, 0x298, 0x299, 0x2A0, 0x2A8, 0x2B0, 0x2B8, 0x2C0, 0x2D0, 0x2D1, 0x2D2, 0x2D8, 0x2D9, 0x2E0, 0x2E1, 0x2E8, 0x2F0, 0x2F1, 0x2F2, 0x2F8, 0x2F9, 0x300, 0x308, 0x310, 0x318, 0x320, 0x800, 0x801, 0x802, 0x803, 0x80F, 0x810, 0x829, 0x82B, 0x82C, 0x82D, 0x82E, 0x82F, 0x830, 0x831, 0x832, 0x833, 0x834, 0x835, 0x836, 0x837, 0x838, 0x839, 0x83A, 0x83B, 0x83C, 0x83D, 0x83E, 0x83F, 0x840, 0x841, 0x842, 0x843, 0x844, 0x845, 0x846, 0x847, 0x850)

(0x100, 0x101, 0x108, 0x109, 0x110, 0x118, 0x119, 0x11A, 0x120, 0x121, 0x128, 0x130, 0x138, 0x139, 0x13A, 0x140, 0x141, 0x142, 0x148, 0x149, 0x14A, 0x150, 0x151, 0x152, 0x158, 0x159, 0x15A, 0x15B, 0x15C, 0x15D, 0x160, 0x161, 0x162, 0x163, 0x164, 0x165, 0x168, 0x170, 0x178, 0x180, 0x188, 0x190, 0x191, 0x198, 0x1A0, 0x1A1, 0x1A8, 0x1A9, 0x1B0, 0x1B2, 0x1B3, 0x1B4, 0x1B5, 0x1B8, 0x1B9, 0x1C0, 0x1C1, 0x1C8, 0x1D0, 0x1D1, 0x1D2, 0x1D8, 0x1D9, 0x1E0, 0x1E8, 0x1F0, 0x1F8, 0x200, 0x210, 0x211, 0x212, 0x213, 0x214, 0x215, 0x218, 0x219, 0x220, 0x221, 0x228, 0x230, 0x231, 0x232, 0x238, 0x239, 0x240, 0x248, 0x250, 0x258, 0x260, 0x270, 0x271, 0x272, 0x278, 0x279, 0x280, 0x281, 0x288, 0x290, 0x291, 0x292, 0x298, 0x299, 0x2A0, 0x2A8, 0x2B0, 0x2B8, 0x2C0, 0x2D0, 0x2D1, 0x2D2, 0x2D8, 0x2D9, 0x2E0, 0x2E1, 0x2E8, 0x2F0, 0x2F1, 0x2F2, 0x2F8, 0x2F9, 0x300, 0x308, 0x310, 0x318, 0x320, 0x800, 0x801, 0x802, 0x803, 0x80F, 0x810, 0x829, 0x82B, 0x82C, 0x82D, 0x82E, 0x82F, 0x830, 0x831, 0x832, 0x833, 0x834, 0x835, 0x836, 0x837, 0x838, 0x839, 0x83A, 0x83B, 0x83C, 0x83D, 0x83E, 0x83F, 0x840, 0x841, 0x842, 0x843, 0x844, 0x845, 0x846, 0x847, 0x850)


//mul:	(0x100, 0x101, -----) // arithmetic: *
//div:	(0x108, 0x109, -----) // arithmetic: /
//mod:	(0x110, -----, -----) // arithmetic: %
//add:	(0x118, 0x119, 0x11a) // arithmetic: +
//sub:	(0x120, 0x121, -----) // arithmetic: -
//rsh:	(0x128, -----, -----) // bitwise: >>
//lsh:	(0x130, -----, -----) // bitwise: <<
//lte:	(0x138, 0x139, 0x13a) // compare: <=
//lt:	(0x140, 0x141, 0x142) // compare: <
//gte:	(0x148, 0x149, 0x14a) // compare: >=
//gt:	(0x150, 0x151, 0x152) // compare: >
//equ:	(0x158, 0x159, 0x15a, 0x15b, 0x15c, 0x15d) // compare: ==
//neq:	(0x160, 0x161, 0x162, 0x163, 0x164, 0x165) // compare: !=
//xor:	(0x168, -----, -----) // bitwise: ^
//andL:	(0x170, -----, -----) // logical: &&
//orL:	(0x178, -----, -----) // logical: ||
//andB:	(0x180, -----, -----) // bitwise: &
//orB:	(0x188, -----, -----) // bitwise: |
//not:	(0x190, 0x191, -----) // logical: !
//notB:	(0x198, -----, -----) // bitwise: ~
//negN:	(0x1a0, 0x1a1, -----) // arithmetic: - (negative)
//posN: (0x1a8, 0x1a9, -----) // [no operation] (arithmetic: + (positive)?)
//sto:	(0x1b0, 0x1b1, 0x1b2, 0x1b3, 0x1b4, 0x1b5) // assignment: =
//unk?  (0x1b8, 0x1b9, -----) // unknown, looks like var opcode
//unk?	(0x1c0, 0x1c1, -----) // unknown, looks like var opcode
//unk?	(0x1c8, -----, -----) // unknown, looks like var opcode
//unk?	(0x1d0, 0x1d1, 0x1d2) // unknown, looks like var opcode
//unk?	(0x1d8, 0x1d9, -----) // unknown, looks like var opcode
//unk?	(0x1e0, -----, -----)
//unk?	(0x1e8, -----, -----)
//unk?	(0x1f0, -----, -----)
//unk?	(0x1f8, -----, -----)
//unk?	(0x200, -----, -----) // unknown, looks like var opcode
//unk?	(0x210, 0x211, 0x212, 0x213, 0x214, 0x215)
//unk?	(0x218, 0x219, -----)
//unk?	(0x220, 0x221, -----)
//unk?	(0x228, -----, -----)
//unk?	(0x230, 0x231, 0x232)
//unk?	(0x238, 0x239, -----)
//unk?	(0x240, -----, -----)
//unk?	(0x248, -----, -----)
//unk?	(0x250, -----, -----)
//unk?	(0x258, -----, -----)
//unk?	(0x260, -----, -----)
//unk?	(0x270, 0x271, 0x272) // unknown, looks like var opcode
//unk?	(0x278, 0x279, -----)
//unk?	(0x280, 0x281, -----)
//unk?	(0x288, -----, -----)
//unk?	(0x290, 0x291, 0x292) // unknown, looks like var opcode
//unk?	(0x298, 0x299, -----) // unknown, looks like var opcode
//unk?	(0x2a0, -----, -----)
//unk?	(0x2a8, -----, -----)
//unk?	(0x2b0, -----, -----)
//unk?	(0x2b8, -----, -----)
//unk?	(0x2c0, -----, -----) // unknown, looks like var opcode
//unk?	(0x2d0, 0x2d1, 0x2d2)
//unk?	(0x2d8, 0x2d9, -----)
//unk?	(0x2e0, 0x2e1, -----)
//unk?	(0x2e8, -----, -----)
//unk?	(0x2f0, 0x2f1, 0x2f2)
//unk?	(0x2f8, 0x2f9, -----)
//unk?	(0x300, -----, -----)
//unk?	(0x308, -----, -----)
//unk?	(0x310, -----, -----)
//unk?	(0x318, -----, -----)
//unk?	(0x320, -----, -----)

(0x800, 0x801, 0x802, 0x803, 0x80F, 0x810, 0x829, 0x82B, 0x82C, 0x82D, 0x82E, 0x82F, 0x830, 0x831, 0x832, 0x833, 0x834, 0x835, 0x836, 0x837, 0x838, 0x839, 0x83A, 0x83B, 0x83C, 0x83D, 0x83E, 0x83F, 0x840, 0x841, 0x842, 0x843, 0x844, 0x845, 0x846, 0x847, 0x850)


(0x800, 0x801, 0x802, 0x803, -----, -----)
(-----, -----, -----, -----, -----, -----, -----, 0x80f)
(0x810, -----, -----)
(-----, 0x829, -----, 0x82b, 0x82c, 0x82d, 0x82e, 0x82f)
(0x830, 0x831, 0x832, 0x833, 0x834, 0x835, 0x836, 0x837)
(0x838, 0x839, 0x83a, 0x83b, 0x83c, 0x83d, 0x83e, 0x83f)
(0x840, 0x841, 0x842, 0x843, 0x844, 0x845, 0x846, 0x847)
(0x850, -----, -----)






//push int:	(0x800)
//push str:	(0x801)
//push var:	(0x802)
//push flt:	(0x803)
//call:		(0x80f)
//voidcall:	(0x810)
//alloca:	(0x829)
//ret:		(0x82b)
//jmp:		(0x82c)
//unk?		(0x82d) // unknown jump
//jz:		(0x82e)
//pop:		(0x82f)
//unk?		(0x830) // operands_len=4? (only seen: 00 00 00 00)
//jne:		(0x831)
//unk?		(0x832) // unknown jump
//unk?		(0x833) // unknown jump
//sysc:		(0x834)
//voidsysc:	(0x835)
//CheckPar:	(0x836)
//unk?		(0x837) // operands_len=8?
//unk?		(0x838) // unknown jump
//unk?		(0x839) // unknown jump
//linenum:	(0x83a)
//unk?		(0x83b)	// jump 1 for setskip {}
//unk?		(0x83c)
//unk?		(0x83d)	// jump 2 for setskip {}
//cast int:	(0x83e) // cast (flt?) to int?
//cast flt:	(0x83f) // operands_len=0
//message:	(0x840)
//marker:	(0x841)
//escape:	(0x842)
//unk?		(0x843) // unknown jump
//unk?		(0x844)	// landing 1 and 2 for setskip {}
//unk?		(0x845) // (no occurrences)
//unk?		(0x846) // (no occurrences)
//unk?		(0x847) // operands_len=4? (only seen: 06 00 00 00)

//switch:	(0x850)
